# Spring Kafka Properties
#spring.kafka.bootstrap-servers = localhost
#spring.kafka.properties.spring.json.trusted.packages = *
#spring.kafka.properties.state.dir = /tmp/kafka-streams2
#
# Spring Cloud Stream Properties
server.port = 8081
spring.cloud.stream.kafka.binder.brokers = localhost
spring.cloud.stream.kafka.binder.auto-create-topics=false
spring.cloud.stream.kafka.binder.configuration.key.serializer = org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.configuration.value.serializer = org.springframework.kafka.support.serializer.JsonSerializer
spring.cloud.stream.kafka.binder.configuration.key.deserializer = org.apache.kafka.common.serialization.StringDeserializer
spring.cloud.stream.kafka.binder.configuration.value.deserializer = org.springframework.kafka.support.serializer.JsonDeserializer
spring.cloud.stream.kafka.binder.configuration.auto.commit.interval.ms = 1000
spring.cloud.stream.kafka.binder.configuration.spring.json.trusted.packages = *
spring.cloud.stream.kafka.binder.configuration.spring.json.add.type.headers = true

#
# Spring Cloud Stream Kafka Streams Properties
spring.cloud.stream.kafka.streams.binder.brokers = localhost
spring.cloud.stream.kafka.streams.binder.auto-create-topics = ${spring.cloud.stream.kafka.binder.auto-create-topics}
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde = org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde = org.springframework.kafka.support.serializer.JsonSerde
spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms = 1000
spring.cloud.stream.kafka.streams.binder.configuration.spring.json.trusted.packages = *
spring.cloud.stream.kafka.streams.binder.configuration.spring.json.add.type.headers = true
spring.cloud.stream.kafka.streams.binder.configuration.state.dir = /tmp/kafka-streams2
# teacher out
spring.cloud.stream.bindings.tout.destination=teachers
spring.cloud.stream.bindings.tout.producer.headerMode=headers
spring.cloud.stream.bindings.tout.producer.useNativeEncoding=true

# teacher in
spring.cloud.stream.bindings.tin.destination=teachers
spring.cloud.stream.bindings.tin.group=teachers-to-join
spring.cloud.stream.bindings.tin.consumer.headerMode=headers
spring.cloud.stream.bindings.tin.consumer.useNativeDecoding=true
spring.cloud.stream.kafka.streams.bindings.tin.consumer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.tin.consumer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde<com.example.two_ktbl.Teacher>

# student out
spring.cloud.stream.bindings.sout.destination=students
spring.cloud.stream.bindings.sout.producer.headerMode=headers
spring.cloud.stream.bindings.sout.producer.useNativeEncoding=true
# student in
spring.cloud.stream.bindings.sin.destination=students
spring.cloud.stream.bindings.sin.group=students-to-join
spring.cloud.stream.bindings.sin.consumer.headerMode=headers
spring.cloud.stream.bindings.sin.consumer.useNativeDecoding=true
#spring.cloud.stream.kafka.streams.bindings.sin.consumer.materializedAs=com.example.kfkstrm.Student
spring.cloud.stream.kafka.streams.bindings.sin.consumer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.sin.consumer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde<com.example.two_ktbl.Student>

# visit ex teacher
spring.cloud.stream.bindings.txout.destination=teachers_joined
spring.cloud.stream.bindings.txout.producer.headerMode=headers
spring.cloud.stream.bindings.txout.producer.useNativeEncoding=true
spring.cloud.stream.kafka.streams.bindings.txout.producer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.bindings.txout.producer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde<com.example.two_ktbl.Teacher>


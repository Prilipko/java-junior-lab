#spring.cloud.stream.kafka.binder.brokers = localhost

#spring.cloud.stream.kafka.streams.binder.brokers=localhost
#spring.cloud.stream.kafka.streams.binder.zkNodes=localhost
#spring.cloud.stream.kafka.streams.default.producer.keySerde = org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.kafka.streams.default.producer.valueSerde =
#spring.cloud.stream.kafka.streams.default.producer.useNativeEncoding = true

spring.cloud.stream.kafka.streams.binder.configuration.commit.interval.ms=1000
spring.cloud.stream.kafka.streams.binder.configuration.default.key.serde=org.apache.kafka.common.serialization.Serdes$StringSerde
spring.cloud.stream.kafka.streams.binder.configuration.default.value.serde=org.springframework.kafka.support.serializer.JsonSerde
spring.cloud.stream.kafka.streams.binder.configuration.spring.json.trusted.packages=*
spring.cloud.stream.kafka.streams.binder.configuration.spring.json.add.type.headers=true

#spring.cloud.stream.bindings.sin.destination=students
#spring.cloud.stream.bindings.sin.group=students-to-join
#spring.cloud.stream.bindings.sin.consumer.headerMode=headers
#spring.cloud.stream.bindings.sin.consumer.useNativeDecoding=true
#spring.cloud.stream.kafka.streams.bindings.group-source.consumer.materializedAs=groups-store
#spring.cloud.stream.kafka.streams.bindings.group-source.consumer.keySerde=org.apache.kafka.common.serialization.Serdes$StringSerde
#spring.cloud.stream.kafka.streams.bindings.group-source.consumer.valueSerde=org.springframework.kafka.support.serializer.JsonSerde<com.example.two_ktbl.Student>

#spring.cloud.stream.bindings.group-source.destination = group-source
#spring.cloud.stream.bindings.group-source.producer.headerMode = headers
#spring.cloud.stream.bindings.group-source.producer.useNativeEncoding = true

spring.cloud.stream.bindings.groups-source.destination=group-source
spring.cloud.stream.bindings.groups-source.group=group-processors
spring.cloud.stream.bindings.groups-source.consumer.headerMode = headers
spring.cloud.stream.bindings.groups-source.consumer.useNativeDecoding = true

spring.cloud.stream.bindings.students-source.destination=students-source
spring.cloud.stream.bindings.students-source.group=students-processors
spring.cloud.stream.bindings.students-source.consumer.headerMode = headers
spring.cloud.stream.bindings.students-source.consumer.useNativeDecoding = true

spring.cloud.stream.kafka.streams.bindings.default.consumer.keySerde = org.apache.kafka.common.serialization.Serdes$StringSerde


spring.cloud.stream.bindings.groups-store-sink.destination=students-source
spring.cloud.stream.bindings.groups-store-sink.group=groups-store-sink
spring.cloud.stream.bindings.groups-store-sink.consumer.headerMode = headers
spring.cloud.stream.bindings.groups-store-sink.consumer.useNativeDecoding = true
spring.cloud.stream.kafka.streams.bindings.groups-store-sink.consumer.valueSerde = com.tideworks.tc.utility.JsonSerde<com.example.kafkaagr.Group>
spring.cloud.stream.kafka.streams.bindings.groups-store-sink.consumer.materializedAs = groups-store

spring.cloud.stream.kafka.streams.bindings.students-source.consumer.valueSerde = com.tideworks.tc.utility.JsonSerde<com.example.kafkaagr.Student>
#spring.cloud.stream.kafka.streams.bindings.student-sink.consumer.materializedAs = student-store

spring.cloud.stream.kafka.streams.bindings.groups-source.consumer.valueSerde = com.tideworks.tc.utility.JsonSerde<com.example.kafkaagr.Group>
#spring.cloud.stream.kafka.streams.bindings.student-sink.consumer.materializedAs = student-store
